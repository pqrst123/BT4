// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

contract Studentdata{

    //Structure
    struct Student{
        string name;
        uint256 rollno;
    }

    //Array
    Student[] public studentarr;

    function addStudent(string memory name, uint rollno) public {
        for(uint i=0;i<studentarr.length;i++){
            if(studentarr[i].rollno==rollno){
                revert("Student already exists");
            }
        }
        studentarr.push(Student(name, rollno));
    }

    function getstudentLength() public view returns(uint){
        return studentarr.length;
    }

    function displayStudent() public view returns (Student[] memory){
        return studentarr;
    }

    function getByIndex(uint idx) public view returns(Student memory){
        require(idx< studentarr.length, "Index out of bound");
        return studentarr[idx];
    }

    //fallback
    fallback() external payable { 
        //This function handles external function call that doesnt exist
    }
    receive() external payable { 
        //This function will handle the ether sent by external user but without data mentioned
    }
}


/*
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

pragma solidity ^0.8.0;

contract StudentDB{

struct Student  {

string name;

uint256 rollno;

string class;
}
Student[] private students;

function addStudent (string memory name, uint256 rollno, string memory class) public { 
    
     students.push (Student(name, rollno, class));
      }

function getStudentById(uint256 id) public view returns (string memory, uint256, string memory class) {

require(id < students.length, "Student does not exist in database");

return (students[id].name,students[id].rollno, students[id].class);
}

function getTotalNumberofStudents() public  view returns(uint256){
    return students.length;
}
}
*/






/*
1.    
What is Solidity? 
Solidity is a high-level programming language designed for writing smart 
contracts on the Ethereum blockchain, enabling developers to create 
decentralized applications. 
2.  What is a Smart Contract? 
A smart contract is a self-executing contract with terms directly written into 
code, running on a blockchain, which automatically enforces the agreed-upon 
conditions 
3.   What is the Purpose of Creating Student Data in a Smart Contract? 
The purpose is to store and manage student information securely on the 
blockchain, allowing for transparent and tamper-proof records. 
4.   What are Structures in Solidity? 
Structures (structs) are user-defined data types that allow developers to group 
related variables together, such as a student's name, age, and grade. 
5.   What are Arrays in Solidity? 
Arrays are data structures that can store multiple values of the same type, 
allowing for easy access and manipulation of collections of data, like a list of 
students. 
6.   What is the Fallback Function in Solidity? 
The fallback function is a default function that is called when a smart contract is 
sent Ether without data or when no other function matches the call, allowing the 
contract to handle unexpected transactions
*/